//Tic Tac Toe, 1 or 2 player, ascii win message
#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
using namespace std;

bool won = false;
string winner = "ERROR";
vector<string> p1;
vector<string> p2;
string winCons[8][3] = {
    {"0", "1", "2"},
    {"3", "4", "5"},
    {"6", "7", "8"},
    {"0", "3", "6"},
    {"1", "4", "7"},
    {"2", "5", "8"},
    {"0", "4", "8"},
    {"2", "4", "6"},
};
string turn(int playerNum)
{
    string placeHold;
    bool valid = false;
    while (!valid)
    {
        valid = true;
        cout << "Player " << playerNum << ", Choose an Empty Square:   ";
        cin >> placeHold;
        if (
            placeHold != "0" &&
            placeHold != "1" &&
            placeHold != "2" &&
            placeHold != "3" &&
            placeHold != "4" &&
            placeHold != "5" &&
            placeHold != "6" &&
            placeHold != "7" &&
            placeHold != "8")
        {
            valid = false;
        }
        for (int a = 0; a < p1.size(); a++)
        {
            if (p1[a] == placeHold)
            {
                valid = false;
            }
        }
        for (int a = 0; a < p2.size(); a++)
        {
            if (p2[a] == placeHold)
            {
                valid = false;
            }
        }
    }
    return placeHold;
}

string winCheck()
{
    //For each win condition, check if all 3 required values are in either players list
    for (int b = 0; b < 9; b++)
    {
        if (
            count(p1.begin(), p1.end(), winCons[b][0]) &&
            count(p1.begin(), p1.end(), winCons[b][1]) &&
            count(p1.begin(), p1.end(), winCons[b][2]))
        {
            won = true;
            return " .----------------.   .----------------.  .----------------.  .-----------------. .----------------. \n| .--------------. | | .--------------. || .--------------. || .--------------. || .--------------. |\n| |  ____  ____  | | | | _____  _____ | || |     _____    | || | ____  _____  | || |    _______   | |\n| | |_  _||_  _| | | | ||_   _||_   _|| || |    |_   _|   | || ||_   \\|_   _| | || |   /  ___  |  | |\n| |   \\ \\  / /   | | | |  | | /\\ | |  | || |      | |     | || |  |   \\ | |   | || |  |  (__ \\_|  | |\n| |    > `' <    | | | |  | |/  \\| |  | || |      | |     | || |  | |\\ \\| |   | || |   '.___`-.   | |\n| |  _/ /'`\\ \\_  | | | |  |   /\\   |  | || |     _| |_    | || | _| |_\\   |_  | || |  |`\\____) |  | |\n| | |____||____| | | | |  |__/  \\__|  | || |    |_____|   | || ||_____|\\____| | || |  |_______.'  | |\n| |              | | | |              | || |              | || |              | || |              | |\n| '--------------' | | '--------------' || '--------------' || '--------------' || '--------------' |\n '----------------'   '----------------'  '----------------'  '----------------'  '----------------' ";
        }
        else if (
            count(p2.begin(), p2.end(), winCons[b][0]) &&
            count(p2.begin(), p2.end(), winCons[b][1]) &&
            count(p2.begin(), p2.end(), winCons[b][2]))
        {
            won = true;
            return " .----------------.   .----------------.  .----------------.  .-----------------. .----------------. \n| .--------------. | | .--------------. || .--------------. || .--------------. || .--------------. |\n| |     ____     | | | | _____  _____ | || |     _____    | || | ____  _____  | || |    _______   | |\n| |   .'    `.   | | | ||_   _||_   _|| || |    |_   _|   | || ||_   \\|_   _| | || |   /  ___  |  | |\n| |  /  .--.  \\  | | | |  | | /\\ | |  | || |      | |     | || |  |   \\ | |   | || |  |  (__ \\_|  | |\n| |  | |    | |  | | | |  | |/  \\| |  | || |      | |     | || |  | |\\ \\| |   | || |   '.___`-.   | |\n| |  \\  `--'  /  | | | |  |   /\\   |  | || |     _| |_    | || | _| |_\\   |_  | || |  |`\\____) |  | |\n| |   `.____.'   | | | |  |__/  \\__|  | || |    |_____|   | || ||_____|\\____| | || |  |_______.'  | |\n| |              | | | |              | || |              | || |              | || |              | |\n| '--------------' | | '--------------' || '--------------' || '--------------' || '--------------' |\n'----------------'   '----------------'  '----------------'  '----------------'  '----------------' \n";
        }
    }
    //Once Player 1 has 5 pieces, the board is full
    if (p1.size() == 5)
    {
        won = true;
        return " .----------------.  .----------------.  .----------------.  .----------------. \n| .--------------. || .--------------. || .--------------. || .--------------. |\n| |  ________    | || |  _______     | || |      __      | || | _____  _____ | |\n| | |_   ___ `.  | || | |_   __ \\    | || |     /  \\     | || ||_   _||_   _|| |\n| |   | |   `. \\ | || |   | |__) |   | || |    / /\\ \\    | || |  | | /\\ | |  | |\n| |   | |    | | | || |   |  __ /    | || |   / ____ \\   | || |  | |/  \\| |  | |\n| |  _| |___.' / | || |  _| |  \\ \\_  | || | _/ /    \\ \\_ | || |  |   /\\   |  | |\n| | |________.'  | || | |____| |___| | || ||____|  |____|| || |  |__/  \\__|  | |\n| |              | || |              | || |              | || |              | |\n| '--------------' || '--------------' || '--------------' || '--------------' |\n '----------------'  '----------------'  '----------------'  '----------------' ";
    }
    return "";
}

void printBoard()
{
    cout << " 0  1  2\n 3  4  5\n 6  7  8\n___________\n|";
    for (int j = 0; j < 9; j++)
    {
        string key = to_string(j);
        if (count(p1.begin(), p1.end(), key))
        {
            cout << " X ";
        }
        else if (count(p2.begin(), p2.end(), key))
        {
            cout << " O ";
        }
        else
        {
            cout << "   ";
        }
        if (((j + 1) % 3) == 0)
        {
            cout << "|\n";
            if (j != 8)
            {
                cout << "|";
            }
        }
    }
    cout << "\n";
}

int main()
{
    while (!won)
    {
        printBoard();
        //Exit early if player 1 has made 5 moves already
        p1.push_back(turn(1));
        cout << winCheck();
        if (!won)
        {
            printBoard();
            p2.push_back(turn(2));
            cout << winCheck();
        }
    }
    cout << "\n";
    system("pause");
}